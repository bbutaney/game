// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Connect4$Game_new = require("./Connect4.bs.js");
var CS17SetupGame$Game_new = require("./CS17SetupGame.bs.js");

function AIPlayer(MyGame) {
  var createValueList = function (l, s) {
    if (l) {
      return {
              hd: Curry._1(MyGame.estimateValue, Curry._2(MyGame.nextState, s, l.hd)),
              tl: createValueList(l.tl, s)
            };
    } else {
      return /* [] */0;
    }
  };
  var findMax = function (_l, _max) {
    while(true) {
      var max = _max;
      var l = _l;
      if (!l) {
        return max;
      }
      var tl = l.tl;
      var hd = l.hd;
      if (max < hd) {
        _max = hd;
        _l = tl;
        continue ;
      }
      _l = tl;
      continue ;
    };
  };
  CS17SetupGame$Game_new.checkExpect(findMax({
            hd: 1.0,
            tl: {
              hd: 10.0,
              tl: {
                hd: 1000.0,
                tl: {
                  hd: 9.0,
                  tl: {
                    hd: 1.0,
                    tl: /* [] */0
                  }
                }
              }
            }
          }, 0.0), 1000.0, "testing findMax");
  CS17SetupGame$Game_new.checkExpect(findMax(/* [] */0, 0.0), 0.0, "testing findMax base case");
  var allNextStates = function (s, l) {
    if (!l) {
      return /* [] */0;
    }
    var tl = l.tl;
    var hd = l.hd;
    Caml_obj.caml_equal(Curry._1(MyGame.gameStatus, Curry._2(MyGame.nextState, s, hd)), {
          TAG: /* Win */0,
          _0: /* P1 */0
        });
    return {
            hd: Curry._2(MyGame.nextState, s, hd),
            tl: allNextStates(s, tl)
          };
  };
  var getDepthBelow = function (l) {
    if (!l) {
      return /* [] */0;
    }
    var hd = l.hd;
    return List.flatten({
                hd: allNextStates(hd, Curry._1(MyGame.legalMoves, hd)),
                tl: {
                  hd: getDepthBelow(l.tl),
                  tl: /* [] */0
                }
              });
  };
  var getDepthZero = function (_depth, s, _l) {
    while(true) {
      var l = _l;
      var depth = _depth;
      if (depth === 0) {
        return l;
      }
      if (l) {
        _l = List.flatten({
              hd: getDepthBelow(l),
              tl: /* [] */0
            });
        _depth = depth - 1 | 0;
        continue ;
      }
      _l = getDepthBelow({
            hd: s,
            tl: /* [] */0
          });
      _depth = depth - 1 | 0;
      continue ;
    };
  };
  var findBestState = function (_l, _max) {
    while(true) {
      var max = _max;
      var l = _l;
      if (!l) {
        return max;
      }
      var tl = l.tl;
      var hd = l.hd;
      if (Curry._1(MyGame.estimateValue, max) < Curry._1(MyGame.estimateValue, hd)) {
        _max = hd;
        _l = tl;
        continue ;
      }
      _l = tl;
      continue ;
    };
  };
  var getBestFromMove = function (s, depth, mv) {
    return findBestState(getDepthZero(depth, Curry._2(MyGame.nextState, s, mv), /* [] */0), s);
  };
  var pickBestLegalMove = function (s, _legals, _bestM, p, depth) {
    while(true) {
      var bestM = _bestM;
      var legals = _legals;
      if (!legals) {
        return bestM;
      }
      var tl = legals.tl;
      var hd = legals.hd;
      if (typeof p !== "number" && p.TAG !== /* Win */0) {
        if (p._0) {
          if (Curry._1(MyGame.estimateValue, getBestFromMove(s, depth, hd)) < Curry._1(MyGame.estimateValue, getBestFromMove(s, depth, bestM))) {
            _bestM = hd;
            _legals = tl;
            continue ;
          }
          if (Curry._1(MyGame.estimateValue, getBestFromMove(s, depth, hd)) > Curry._1(MyGame.estimateValue, getBestFromMove(s, depth, bestM))) {
            _legals = tl;
            continue ;
          }
          
        } else {
          if (Curry._1(MyGame.estimateValue, getBestFromMove(s, depth, hd)) > Curry._1(MyGame.estimateValue, getBestFromMove(s, depth, bestM))) {
            _bestM = hd;
            _legals = tl;
            continue ;
          }
          if (Curry._1(MyGame.estimateValue, getBestFromMove(s, 2, hd)) < Curry._1(MyGame.estimateValue, getBestFromMove(s, depth, bestM))) {
            _legals = tl;
            continue ;
          }
          
        }
      }
      _bestM = hd;
      _legals = tl;
      continue ;
    };
  };
  var nextMove = function (s) {
    return pickBestLegalMove(s, Curry._1(MyGame.legalMoves, s), List.hd(Curry._1(MyGame.legalMoves, s)), Curry._1(MyGame.gameStatus, s), 3);
  };
  return {
          PlayerGame: MyGame,
          createValueList: createValueList,
          findMax: findMax,
          allNextStates: allNextStates,
          getDepthBelow: getDepthBelow,
          getDepthZero: getDepthZero,
          findBestState: findBestState,
          getBestFromMove: getBestFromMove,
          pickBestLegalMove: pickBestLegalMove,
          nextMove: nextMove,
          playerName: ""
        };
}

function createValueList(l, s) {
  if (l) {
    return {
            hd: Curry._1(Connect4$Game_new.Connect4.estimateValue, Curry._2(Connect4$Game_new.Connect4.nextState, s, l.hd)),
            tl: createValueList(l.tl, s)
          };
  } else {
    return /* [] */0;
  }
}

function findMax(_l, _max) {
  while(true) {
    var max = _max;
    var l = _l;
    if (!l) {
      return max;
    }
    var tl = l.tl;
    var hd = l.hd;
    if (max < hd) {
      _max = hd;
      _l = tl;
      continue ;
    }
    _l = tl;
    continue ;
  };
}

CS17SetupGame$Game_new.checkExpect(findMax({
          hd: 1.0,
          tl: {
            hd: 10.0,
            tl: {
              hd: 1000.0,
              tl: {
                hd: 9.0,
                tl: {
                  hd: 1.0,
                  tl: /* [] */0
                }
              }
            }
          }
        }, 0.0), 1000.0, "testing findMax");

CS17SetupGame$Game_new.checkExpect(findMax(/* [] */0, 0.0), 0.0, "testing findMax base case");

function allNextStates(s, l) {
  if (!l) {
    return /* [] */0;
  }
  var tl = l.tl;
  var hd = l.hd;
  Caml_obj.caml_equal(Curry._1(Connect4$Game_new.Connect4.gameStatus, Curry._2(Connect4$Game_new.Connect4.nextState, s, hd)), {
        TAG: /* Win */0,
        _0: /* P1 */0
      });
  return {
          hd: Curry._2(Connect4$Game_new.Connect4.nextState, s, hd),
          tl: allNextStates(s, tl)
        };
}

function getDepthBelow(l) {
  if (!l) {
    return /* [] */0;
  }
  var hd = l.hd;
  return List.flatten({
              hd: allNextStates(hd, Curry._1(Connect4$Game_new.Connect4.legalMoves, hd)),
              tl: {
                hd: getDepthBelow(l.tl),
                tl: /* [] */0
              }
            });
}

function getDepthZero(_depth, s, _l) {
  while(true) {
    var l = _l;
    var depth = _depth;
    if (depth === 0) {
      return l;
    }
    if (l) {
      _l = List.flatten({
            hd: getDepthBelow(l),
            tl: /* [] */0
          });
      _depth = depth - 1 | 0;
      continue ;
    }
    _l = getDepthBelow({
          hd: s,
          tl: /* [] */0
        });
    _depth = depth - 1 | 0;
    continue ;
  };
}

function findBestState(_l, _max) {
  while(true) {
    var max = _max;
    var l = _l;
    if (!l) {
      return max;
    }
    var tl = l.tl;
    var hd = l.hd;
    if (Curry._1(Connect4$Game_new.Connect4.estimateValue, max) < Curry._1(Connect4$Game_new.Connect4.estimateValue, hd)) {
      _max = hd;
      _l = tl;
      continue ;
    }
    _l = tl;
    continue ;
  };
}

function getBestFromMove(s, depth, mv) {
  return findBestState(getDepthZero(depth, Curry._2(Connect4$Game_new.Connect4.nextState, s, mv), /* [] */0), s);
}

function pickBestLegalMove(s, _legals, _bestM, p, depth) {
  while(true) {
    var bestM = _bestM;
    var legals = _legals;
    if (!legals) {
      return bestM;
    }
    var tl = legals.tl;
    var hd = legals.hd;
    if (typeof p !== "number" && p.TAG !== /* Win */0) {
      if (p._0) {
        if (Curry._1(Connect4$Game_new.Connect4.estimateValue, getBestFromMove(s, depth, hd)) < Curry._1(Connect4$Game_new.Connect4.estimateValue, getBestFromMove(s, depth, bestM))) {
          _bestM = hd;
          _legals = tl;
          continue ;
        }
        if (Curry._1(Connect4$Game_new.Connect4.estimateValue, getBestFromMove(s, depth, hd)) > Curry._1(Connect4$Game_new.Connect4.estimateValue, getBestFromMove(s, depth, bestM))) {
          _legals = tl;
          continue ;
        }
        
      } else {
        if (Curry._1(Connect4$Game_new.Connect4.estimateValue, getBestFromMove(s, depth, hd)) > Curry._1(Connect4$Game_new.Connect4.estimateValue, getBestFromMove(s, depth, bestM))) {
          _bestM = hd;
          _legals = tl;
          continue ;
        }
        if (Curry._1(Connect4$Game_new.Connect4.estimateValue, getBestFromMove(s, 2, hd)) < Curry._1(Connect4$Game_new.Connect4.estimateValue, getBestFromMove(s, depth, bestM))) {
          _legals = tl;
          continue ;
        }
        
      }
    }
    _bestM = hd;
    _legals = tl;
    continue ;
  };
}

function nextMove(s) {
  return pickBestLegalMove(s, Curry._1(Connect4$Game_new.Connect4.legalMoves, s), List.hd(Curry._1(Connect4$Game_new.Connect4.legalMoves, s)), Curry._1(Connect4$Game_new.Connect4.gameStatus, s), 3);
}

var playerName = "";

var TestAIPlayer = {
  PlayerGame: Connect4$Game_new.Connect4,
  createValueList: createValueList,
  findMax: findMax,
  allNextStates: allNextStates,
  getDepthBelow: getDepthBelow,
  getDepthZero: getDepthZero,
  findBestState: findBestState,
  getBestFromMove: getBestFromMove,
  pickBestLegalMove: pickBestLegalMove,
  nextMove: nextMove,
  playerName: playerName
};

CS17SetupGame$Game_new.checkExpect(findMax({
          hd: 1.0,
          tl: {
            hd: 10.0,
            tl: {
              hd: 1000.0,
              tl: {
                hd: 9.0,
                tl: {
                  hd: 1.0,
                  tl: /* [] */0
                }
              }
            }
          }
        }, 0.0), 1000.0, "testing findMax");

CS17SetupGame$Game_new.checkExpect(findMax(/* [] */0, 0.0), 0.0, "testing findMax base case");

var TestGame;

var MyAIPlayer = {
  PlayerGame: Connect4$Game_new.Connect4,
  nextMove: nextMove,
  playerName: playerName
};

exports.AIPlayer = AIPlayer;
exports.TestGame = TestGame;
exports.TestAIPlayer = TestAIPlayer;
exports.MyAIPlayer = MyAIPlayer;
/*  Not a pure module */
